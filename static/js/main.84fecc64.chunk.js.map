{"version":3,"sources":["components/Movie.js","Movies.js","Home.js","components/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","id","year","title","summary","poster","rating","className","src","alt","classNames","edit","count","size","isHalf","value","slice","href","MovieList","styled","div","Movies","useState","movies","setMovies","loading","setLoading","error","setError","limit","setLimit","useEffect","axios","get","then","response","console","log","data","catch","e","finally","dataLength","hasMore","next","map","movie","key","medium_cover_image","HomeStyle","Home","Detail","match","history","params","setMovie","a","fetchMovie","like_count","download_count","description_full","onClick","push","Navigator","App","to","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.84fecc64.chunk.js","sourcesContent":["import React from 'react';\nimport './Movie.css';\nimport ReactStars from 'react-rating-stars-component';\n\nfunction Movie({ id, year, title, summary, poster, rating }) {\n  return (\n    <div className=\"movie\">\n      <img src={poster} alt={title} title={title} />\n      <div className=\"movie__data\">\n        <h3 className=\"movie__title\">{title}</h3>\n        <h5 className=\"movie__year\">{year}</h5>\n        <h5 className=\"movie__rating\">Rating: {rating}</h5>\n        <ReactStars\n          classNames=\"movie__stars\"\n          edit={false}\n          count={5}\n          size={24}\n          isHalf={true}\n          value={rating / 2}\n        />\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n        <a className=\"movie__detail\" href={`/movies/${id}`}>\n          자세히보기\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Movie;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Movie from './components/Movie';\nimport styled from 'styled-components';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nconst MovieList = styled.div`\n  .movies {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    padding: 50px;\n    padding-top: 70px;\n  }\n`;\n\nfunction Movies() {\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(null);\n  const [limit, setLimit] = useState(20);\n\n  const fetchMovies = () => {\n    axios\n      .get(`https://yts.mx/api/v2/list_movies.json?limit=${limit}`)\n      .then(response => {\n        setError(null);\n        setLoading(true);\n        console.log(response);\n        setMovies(response.data.data.movies);\n      })\n      .catch(e => {\n        setError(e);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    fetchMovies();\n  }, [limit]);\n\n  if (loading) return <div>로딩중...</div>;\n  if (error) return <div>에러발생</div>;\n  if (!movies) return null;\n\n  console.log('movies', movies);\n\n  return (\n    <>\n      <MovieList>\n        <InfiniteScroll\n          dataLength={4}\n          hasMore={true}\n          next={() => setLimit(limit + 4)}\n        >\n          <ul className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                rating={movie.rating}\n              />\n            ))}\n          </ul>\n        </InfiniteScroll>\n      </MovieList>\n    </>\n  );\n}\n\nexport default Movies;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst HomeStyle = styled.div`\n  .home {\n    margin: 20px;\n  }\n`;\n\nconst Home = () => {\n  return (\n    <HomeStyle>\n      <div className=\"home\">\n        <h1>사용된 라이브러리 및 프레임 워크</h1>\n        <ul>\n          <li>axios : ^0.20.0</li>\n          <li>react-router-dom : ^5.2.0</li>\n          <li>style-components : ^5.2.0</li>\n          <li>react-rating-stars-component : ^2.2.0</li>\n          <li>react-infinite-scroll-component : ^5.1.0</li>\n        </ul>\n      </div>\n    </HomeStyle>\n  );\n};\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Detail.css';\nimport ReactStars from 'react-rating-stars-component';\n\nfunction Detail({ match, history }) {\n  const id = match.params.id;\n  console.log(match);\n  const [movie, setMovie] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setError(null);\n        setMovie(null);\n        setLoading(true);\n        const response = await axios.get(\n          `https://yts.mx/api/v2/movie_details.json?movie_id=${id}`\n        );\n        setMovie(response.data.data.movie);\n      } catch (e) {\n        setError(e);\n      }\n      setLoading(false);\n    };\n    fetchMovie();\n  }, []);\n  if (loading) return <div>로딩중...</div>;\n  if (error) return <div>에러발생</div>;\n  if (!movie) return null;\n\n  return (\n    <>\n      <div className=\"movie__one\">\n        <img\n          src={movie.medium_cover_image}\n          alt={movie.title}\n          title={movie.title}\n        />\n        <div className=\"movie__one__data\">\n          <h3 className=\"movie__one__title\">{movie.title}</h3>\n          <h5 className=\"movie__one__like\">Like: {movie.like_count}</h5>\n          <h5 className=\"movie__one__download\">\n            Download: {movie.download_count}\n          </h5>\n          <h5 className=\"movie__one__rating\">Rating: {movie.rating}</h5>\n          <ReactStars\n            classNames=\"movie__one__stars\"\n            edit={false}\n            count={5}\n            size={24}\n            isHalf={true}\n            value={movie.rating / 2}\n          />\n          <p className=\"movie__one__summary\">{movie.description_full}</p>\n          <button className=\"backBtn\" onClick={() => history.push('/movies')}>\n            리스트로 돌아가기\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Detail;\n","import React from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport Movies from './Movies';\nimport Home from './Home';\nimport Detail from './components/Detail';\nimport styled from 'styled-components';\n\nconst Navigator = styled.div`\n  .links {\n    display: flex;\n    align-items: center;\n    margin: 0;\n    padding: 0;\n    background: #dfdfdf;\n    width: 100%;\n    height: 60px;\n  }\n  .link {\n    list-style: none;\n    margin-left: 30px;\n  }\n  .link a {\n    text-decoration: none;\n    color: black;\n  }\n  .link a:hover {\n    color: #3b88c3;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <Navigator>\n        <ul className=\"links\">\n          <li className=\"link\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"link\">\n            <Link to=\"/movies\">Movies</Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route path=\"/\" exact={true} component={Home} />\n          <Route exact path=\"/movies\" component={Movies} />\n          <Route path=\"/movies/:id\" component={Detail} />\n        </Switch>\n      </Navigator>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}